# Étape 1 : Build
# Utiliser l'image officielle de Node.js
FROM node:22.17.0-slim AS builder

# Définir le répertoire de travail
WORKDIR /app

# Copier les fichiers de dépendances pour utiliser le cache Docker
COPY package*.json ./

# Installer toutes les dépendances, en ignorant les conflits de dépendance pour la compatibilité avec Next.js 14 et 15.
RUN npm install --legacy-peer-deps

# Nettoyer le cache npm pour éviter les erreurs de corruption
RUN npm cache clean --force

# Copier le reste du code source
COPY . .

# Générer le client Prisma
RUN npx prisma generate

# Construire l'application Next.js
# L'option `output: 'standalone'` dans next.config.js est nécessaire pour cette étape.
RUN npm run build

# Étape 2 : Runner
# Utiliser une image minimale pour la production
FROM node:22.17.0-slim AS runner

# Installer OpenSSL pour les certificats SSL si nécessaire, comme dans votre Dockerfile initial
RUN apt-get update && apt-get install -y openssl && rm -rf /var/lib/apt/lists/*

# Définir le répertoire de travail
WORKDIR /app

# Copier uniquement les fichiers nécessaires depuis l'étape de build
# Le dossier `standalone` inclut tout le code de l'application et de l'API.
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public
COPY --from=builder /app/prisma ./prisma

# Définir les variables d'environnement de production
ENV NODE_ENV=production

# Appliquer les migrations de la base de données avant de démarrer l'application
CMD ["/bin/sh", "-c", "npx prisma migrate deploy && node server.js"]

# Exposer le port par défaut de Next.js
EXPOSE 3000